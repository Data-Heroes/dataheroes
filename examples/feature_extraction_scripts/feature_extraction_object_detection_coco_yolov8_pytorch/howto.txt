I - Extracting features from the COCO dataset:====================================================================================================================================================================================
  1. Install YOLOv8 dependencies:
    pip3 install -r requirements.txt
  2. Assuming the script is run from the root folder of the project, the following commands can be used to:
    a) run the feature extraction script:
      python src/feature_extraction_object_detection_dataset_using_yolov8.py --root-dir <location_of_coco_dataset> --export-dir <folder_to_save_extracted_features_to>
    b) when working with custom YOLOv8 models, the user can provide their own model parameters file, using the `--model_param_location` argument
      python src/feature_extraction_object_detection_dataset_using_yolov8.py --root-dir <location_of_coco_dataset> --export-dir <folder_to_save_extracted_features_to> --model_param_location <location_of_model_parameters_file>

II - Adding support for a new dataset:============================================================================================================================================================================================
  1. Construct a sub-class of the Dataset type from src/datasets.py, for handling a new dataset; The following abstract methods need to be implemented:
    - has_test_split(): returns True if the dataset has a test split
    - download_dataset(): downloads the dataset; the structure of the dataset files is defined by the author; COCODataset provides one such possible structure
    - load_annotation_metadata(): builds, stores on disk and loads from disk the annotation metadata; 
      An annotation record include:
        * an annotation id, 
        * a bounding box representing a list of 4 floats (the top left x position; the top left y position, the width and the height of the bounding box)
        * the category id for the object referred inside the image
      The annotation does not stores references to the image it is linked to because the Dataset's get_annotations_list() method, specifically return all annotations for a given image
      The annotation metadata is made up of:
        * a dictionary pairing image_ids to filename of the dataset's images 
        * a dictionary pairing image_ids to a list of annotation records
      The annotation metadata is constructed for the train split and, if exists, for the test split
      The annotation metadata is stored on disk in pickle format
    - get_image_ids(split_type): returns a list of all image_ids inside the dataset's split (train or test)
    - get_image_path(split_type, image_id): returns the path to the image identified by the provided split and image_id
    - get_annotations_list(split_type, image_id): returns a list of ImageAnnotation records for the given split and image_id
    Note: An example dataset is provided for the COCO dataset in src/datasets.py
  2. Replace the COCODataset object in the `main()` routine of feature_extraction_object_detection_dataset_using_yolov8.py script file with the new Dataset
  3. Run the python script as described in the previous section